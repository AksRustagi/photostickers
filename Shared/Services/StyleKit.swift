//
//  StyleKit.swift
//  Photo Stickers
//
//  Created by Jochen Pfeiffer on 07.04.17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class StyleKit: NSObject {

    //// Cache

    private struct Cache {
        static let appColor: UIColor = UIColor(red: 0.030, green: 0.490, blue: 0.860, alpha: 1.000)
        static let stickerShadow: NSShadow = NSShadow(color: UIColor.black, offset: CGSize(width: 0, height: 3), blurRadius: 12)
    }

    //// Colors

    public dynamic class var appColor: UIColor { return Cache.appColor }

    //// Shadows

    public dynamic class var stickerShadow: NSShadow { return Cache.stickerShadow }

    //// Drawing Methods

    public dynamic class func drawStarButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 22, y: 3))
        starPath.addLine(to: CGPoint(x: 29.05, y: 13.29))
        starPath.addLine(to: CGPoint(x: 41.02, y: 16.82))
        starPath.addLine(to: CGPoint(x: 33.41, y: 26.71))
        starPath.addLine(to: CGPoint(x: 33.76, y: 39.18))
        starPath.addLine(to: CGPoint(x: 22, y: 35))
        starPath.addLine(to: CGPoint(x: 10.24, y: 39.18))
        starPath.addLine(to: CGPoint(x: 10.59, y: 26.71))
        starPath.addLine(to: CGPoint(x: 2.98, y: 16.82))
        starPath.addLine(to: CGPoint(x: 14.95, y: 13.29))
        starPath.close()
        fillColor.setFill()
        starPath.fill()
        strokeColor.setStroke()
        starPath.lineWidth = lineWidth
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawMultiStarButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 22, y: 2))
        starPath.addLine(to: CGPoint(x: 25.33, y: 6.34))
        starPath.addLine(to: CGPoint(x: 30.13, y: 3.73))
        starPath.addLine(to: CGPoint(x: 31.41, y: 9.05))
        starPath.addLine(to: CGPoint(x: 36.86, y: 8.62))
        starPath.addLine(to: CGPoint(x: 35.86, y: 14))
        starPath.addLine(to: CGPoint(x: 41.02, y: 15.82))
        starPath.addLine(to: CGPoint(x: 37.92, y: 20.33))
        starPath.addLine(to: CGPoint(x: 41.89, y: 24.09))
        starPath.addLine(to: CGPoint(x: 37.22, y: 26.95))
        starPath.addLine(to: CGPoint(x: 39.32, y: 32))
        starPath.addLine(to: CGPoint(x: 33.9, y: 32.71))
        starPath.addLine(to: CGPoint(x: 33.76, y: 38.18))
        starPath.addLine(to: CGPoint(x: 28.51, y: 36.62))
        starPath.addLine(to: CGPoint(x: 26.16, y: 41.56))
        starPath.addLine(to: CGPoint(x: 22, y: 38.01))
        starPath.addLine(to: CGPoint(x: 17.84, y: 41.56))
        starPath.addLine(to: CGPoint(x: 15.49, y: 36.62))
        starPath.addLine(to: CGPoint(x: 10.24, y: 38.18))
        starPath.addLine(to: CGPoint(x: 10.1, y: 32.71))
        starPath.addLine(to: CGPoint(x: 4.68, y: 32))
        starPath.addLine(to: CGPoint(x: 6.78, y: 26.95))
        starPath.addLine(to: CGPoint(x: 2.11, y: 24.09))
        starPath.addLine(to: CGPoint(x: 6.08, y: 20.33))
        starPath.addLine(to: CGPoint(x: 2.98, y: 15.82))
        starPath.addLine(to: CGPoint(x: 8.14, y: 14))
        starPath.addLine(to: CGPoint(x: 7.14, y: 8.62))
        starPath.addLine(to: CGPoint(x: 12.59, y: 9.05))
        starPath.addLine(to: CGPoint(x: 13.87, y: 3.73))
        starPath.addLine(to: CGPoint(x: 18.67, y: 6.34))
        starPath.close()
        fillColor.setFill()
        starPath.fill()
        strokeColor.setStroke()
        starPath.lineWidth = lineWidth
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawCircleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 40, height: 40))
        fillColor.setFill()
        ovalPath.fill()
        strokeColor.setStroke()
        ovalPath.lineWidth = lineWidth
        ovalPath.lineJoinStyle = .round
        ovalPath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawRectangleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Color Declarations
        let highlightedColor = StyleKit.appColor.withSaturation(0.42)
        let transparentColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let strokeColor = highlighted ? highlightedColor : StyleKit.appColor
        let fillColor = selected || highlighted ? strokeColor : transparentColor

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 40, height: 40), cornerRadius: 8)
        fillColor.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = lineWidth
        rectanglePath.lineJoinStyle = .round
        rectanglePath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawStarPath(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 22, y: 1))
        starPath.addLine(to: CGPoint(x: 30.11, y: 12.84))
        starPath.addLine(to: CGPoint(x: 43.87, y: 16.89))
        starPath.addLine(to: CGPoint(x: 35.12, y: 28.26))
        starPath.addLine(to: CGPoint(x: 35.52, y: 42.61))
        starPath.addLine(to: CGPoint(x: 22, y: 37.8))
        starPath.addLine(to: CGPoint(x: 8.48, y: 42.61))
        starPath.addLine(to: CGPoint(x: 8.88, y: 28.26))
        starPath.addLine(to: CGPoint(x: 0.13, y: 16.89))
        starPath.addLine(to: CGPoint(x: 13.89, y: 12.84))
        starPath.close()
        UIColor.red.setStroke()
        starPath.lineWidth = 0.5
        starPath.lineCapStyle = .round
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawMultiStarPath(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 22, y: 0))
        starPath.addLine(to: CGPoint(x: 23.95, y: 3.49))
        starPath.addLine(to: CGPoint(x: 26.57, y: 0.48))
        starPath.addLine(to: CGPoint(x: 27.75, y: 4.3))
        starPath.addLine(to: CGPoint(x: 30.95, y: 1.9))
        starPath.addLine(to: CGPoint(x: 31.3, y: 5.88))
        starPath.addLine(to: CGPoint(x: 34.93, y: 4.2))
        starPath.addLine(to: CGPoint(x: 34.45, y: 8.17))
        starPath.addLine(to: CGPoint(x: 38.35, y: 7.28))
        starPath.addLine(to: CGPoint(x: 37.06, y: 11.06))
        starPath.addLine(to: CGPoint(x: 41.05, y: 11))
        starPath.addLine(to: CGPoint(x: 39, y: 14.43))
        starPath.addLine(to: CGPoint(x: 42.92, y: 15.2))
        starPath.addLine(to: CGPoint(x: 40.2, y: 18.13))
        starPath.addLine(to: CGPoint(x: 43.88, y: 19.7))
        starPath.addLine(to: CGPoint(x: 40.61, y: 22))
        starPath.addLine(to: CGPoint(x: 43.88, y: 24.3))
        starPath.addLine(to: CGPoint(x: 40.2, y: 25.87))
        starPath.addLine(to: CGPoint(x: 42.92, y: 28.8))
        starPath.addLine(to: CGPoint(x: 39, y: 29.57))
        starPath.addLine(to: CGPoint(x: 41.05, y: 33))
        starPath.addLine(to: CGPoint(x: 37.06, y: 32.94))
        starPath.addLine(to: CGPoint(x: 38.35, y: 36.72))
        starPath.addLine(to: CGPoint(x: 34.45, y: 35.83))
        starPath.addLine(to: CGPoint(x: 34.93, y: 39.8))
        starPath.addLine(to: CGPoint(x: 31.3, y: 38.12))
        starPath.addLine(to: CGPoint(x: 30.95, y: 42.1))
        starPath.addLine(to: CGPoint(x: 27.75, y: 39.7))
        starPath.addLine(to: CGPoint(x: 26.57, y: 43.52))
        starPath.addLine(to: CGPoint(x: 23.95, y: 40.51))
        starPath.addLine(to: CGPoint(x: 22, y: 44))
        starPath.addLine(to: CGPoint(x: 20.05, y: 40.51))
        starPath.addLine(to: CGPoint(x: 17.43, y: 43.52))
        starPath.addLine(to: CGPoint(x: 16.25, y: 39.7))
        starPath.addLine(to: CGPoint(x: 13.05, y: 42.1))
        starPath.addLine(to: CGPoint(x: 12.7, y: 38.12))
        starPath.addLine(to: CGPoint(x: 9.07, y: 39.8))
        starPath.addLine(to: CGPoint(x: 9.55, y: 35.83))
        starPath.addLine(to: CGPoint(x: 5.65, y: 36.72))
        starPath.addLine(to: CGPoint(x: 6.94, y: 32.94))
        starPath.addLine(to: CGPoint(x: 2.95, y: 33))
        starPath.addLine(to: CGPoint(x: 5, y: 29.57))
        starPath.addLine(to: CGPoint(x: 1.08, y: 28.8))
        starPath.addLine(to: CGPoint(x: 3.8, y: 25.87))
        starPath.addLine(to: CGPoint(x: 0.12, y: 24.3))
        starPath.addLine(to: CGPoint(x: 3.39, y: 22))
        starPath.addLine(to: CGPoint(x: 0.12, y: 19.7))
        starPath.addLine(to: CGPoint(x: 3.8, y: 18.13))
        starPath.addLine(to: CGPoint(x: 1.08, y: 15.2))
        starPath.addLine(to: CGPoint(x: 5, y: 14.43))
        starPath.addLine(to: CGPoint(x: 2.95, y: 11))
        starPath.addLine(to: CGPoint(x: 6.94, y: 11.06))
        starPath.addLine(to: CGPoint(x: 5.65, y: 7.28))
        starPath.addLine(to: CGPoint(x: 9.55, y: 8.17))
        starPath.addLine(to: CGPoint(x: 9.07, y: 4.2))
        starPath.addLine(to: CGPoint(x: 12.7, y: 5.88))
        starPath.addLine(to: CGPoint(x: 13.05, y: 1.9))
        starPath.addLine(to: CGPoint(x: 16.25, y: 4.3))
        starPath.addLine(to: CGPoint(x: 17.43, y: 0.48))
        starPath.addLine(to: CGPoint(x: 20.05, y: 3.49))
        starPath.close()
        UIColor.red.setStroke()
        starPath.lineWidth = 0.5
        starPath.lineCapStyle = .round
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()
    }

    //// Generated Images

    public dynamic class func imageOfStarButton(lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        StyleKit.drawStarButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfStarButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStarButton
    }

    public dynamic class func imageOfMultiStarButton(lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        StyleKit.drawMultiStarButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfMultiStarButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMultiStarButton
    }

    public dynamic class func imageOfCircleButton(lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        StyleKit.drawCircleButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfCircleButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCircleButton
    }

    public dynamic class func imageOfRectangleButton(lineWidth: CGFloat = 2, selected: Bool = false, highlighted: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        StyleKit.drawRectangleButton(lineWidth: lineWidth, selected: selected, highlighted: highlighted)

        let imageOfRectangleButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRectangleButton
    }

    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }

    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }

    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }

    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }

    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1 - highlight) + highlight, green: green * (1 - highlight) + highlight, blue: blue * (1 - highlight) + highlight, alpha: alpha * (1 - highlight) + highlight)
    }

    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1 - shadow), green: green * (1 - shadow), blue: blue * (1 - shadow), alpha: alpha * (1 - shadow) + shadow)
    }
}

private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        shadowColor = color
        shadowOffset = offset
        shadowBlurRadius = blurRadius
    }
}
