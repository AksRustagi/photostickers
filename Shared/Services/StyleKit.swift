//
//  StyleKit.swift
//  Photo Stickers
//
//  Created by Jochen Pfeiffer on 14/03/2017.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class StyleKit: NSObject {

    //// Drawing Methods

    public dynamic class func drawStarButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000), strokeColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), lineWidth: CGFloat = 2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)

        //// Star Drawing
        context.saveGState()
        context.translateBy(x: 0, y: lineWidth)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 22, y: 0))
        starPath.addLine(to: CGPoint(x: 29.76, y: 11.32))
        starPath.addLine(to: CGPoint(x: 42.92, y: 15.2))
        starPath.addLine(to: CGPoint(x: 34.55, y: 26.08))
        starPath.addLine(to: CGPoint(x: 34.93, y: 39.8))
        starPath.addLine(to: CGPoint(x: 22, y: 35.2))
        starPath.addLine(to: CGPoint(x: 9.07, y: 39.8))
        starPath.addLine(to: CGPoint(x: 9.45, y: 26.08))
        starPath.addLine(to: CGPoint(x: 1.08, y: 15.2))
        starPath.addLine(to: CGPoint(x: 14.24, y: 11.32))
        starPath.close()
        fillColor.setFill()
        starPath.fill()
        strokeColor.setStroke()
        starPath.lineWidth = lineWidth
        starPath.lineCapStyle = .round
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()

        context.restoreGState()
    }

    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
